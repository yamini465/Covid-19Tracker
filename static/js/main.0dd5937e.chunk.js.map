{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","options","scales","xAxes","gridLines","display","yAxes","BarChart","legend","title","text","CountryPicker","handleCountryChange","fetchedCountires","setFetchedCountires","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","corona","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0dd5937e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__r4JfO\",\"card\":\"Cards_card__dtR1y\",\"infected\":\"Cards_infected__1ZKly\",\"recovered\":\"Cards_recovered__1oHGg\",\"deaths\":\"Cards_deaths__2gpnN\"};","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport styles from './Cards.module.css';\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    console.log(confirmed);\r\n    if(!confirmed)\r\n    {\r\n        return 'Loading.....';\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url =\"https://covid19.mathdro.id/api\";\r\nconst url1=\"https://covid19.mathdro.id/api/daily\";\r\nexport const fetchData = async (country) =>\r\n{\r\n    let changeableUrl = url;\r\n    if(country)\r\n    {\r\n        changeableUrl=`${url}/countries/${country}`\r\n    }\r\n    try\r\n    {\r\n        const {data : {confirmed,recovered,deaths,lastUpdate}} = await axios.get(changeableUrl);\r\n        \r\n        return {confirmed,recovered,deaths,lastUpdate};\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () =>\r\n{\r\n    try\r\n    {\r\n        const {data} = await axios.get(url1);\r\n        const modifiedData = data.map((dailyData)=>(\r\n            {\r\n                confirmed:dailyData.confirmed.total,\r\n                deaths:dailyData.deaths.total,\r\n                date:dailyData.reportDate,\r\n            }\r\n        ));\r\n        return modifiedData;\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () =>\r\n{\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country) => country.name);\r\n    }\r\n    catch(error)\r\n    {\r\n        console.log(error);\r\n\r\n    }\r\n}","import React,{useState, useEffect} from 'react';  \r\nimport { fetchDailyData } from '../../api';  \r\nimport { Line, Bar } from 'react-chartjs-2';  \r\nimport styles from './Chart.module.css'  \r\nimport { Container } from '@material-ui/core';  \r\n  \r\nconst Chart = ({data:{confirmed,deaths,recovered},country}) => {  \r\n    \r\n    const [dailyData, setDailyData] = useState([]);  \r\n      \r\n    useEffect(() => {  \r\n    const fetchAPI = async()=>{  \r\n        setDailyData(await fetchDailyData());  \r\n        }  \r\n        fetchAPI();  \r\n    },[]);  \r\n  \r\nconst lineChart =(  \r\n    dailyData.length ? (   \r\n        <Line data={{  \r\n                        labels: dailyData.map(({date}) =>  date),  \r\n                        datasets :[{  \r\n                            data :  dailyData.map(({confirmed}) =>  confirmed),  \r\n                            label: 'Infected',  \r\n                            borderColor: '#3333ff',  \r\n                            fill: true,  \r\n                        },  \r\n                        {  \r\n                            data :  dailyData.map(({deaths}) =>  deaths),  \r\n                            label: 'Deaths',  \r\n                            borderColor: 'red',  \r\n                            backgroundColor: 'rgba(255, 0, 0, 0.5)',  \r\n                            fill: true,  \r\n                        }]  \r\n                    }}  \r\n                    options={ {  \r\n                        scales : { xAxes : [ { gridLines : { display : false } } ], yAxes : [ { gridLines : { display : false } } ] }  \r\n                    } }  \r\n                    />):null  \r\n                    );  \r\n  \r\nconst BarChart  =(  \r\n       confirmed?(  \r\n        <Bar  \r\n        data={{  \r\n            labels: ['Infected', 'Recovered', 'Deaths'],  \r\n            datasets:[{  \r\n                label:'People',  \r\n                backgroundColor:['rgba(0, 0, 255, 0.5)','rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)' ],  \r\n                data:[confirmed.value,recovered.value,deaths.value]  \r\n            }]  \r\n        }}  \r\n        options={{  \r\n            legend:{display:false},  \r\n            title: {display:true, text:`current state in ${country}`}  \r\n        }}  \r\n        />             \r\n        ): null     \r\n    )  \r\n    return (  \r\n     <div className={styles.container}>  \r\n         {country?BarChart:lineChart}  \r\n     </div>  \r\n    )  \r\n}  \r\nexport default Chart;","import React, {useState, useEffect} from 'react';  \r\nimport {NativeSelect, FormControl} from '@material-ui/core';  \r\nimport styles from './CountryPicker.module.css';  \r\nimport {fetchCountries} from '../../api';  \r\nconst CountryPicker = ({handleCountryChange}) => {  \r\nconst [fetchedCountires, setFetchedCountires] = useState([]);  \r\n  \r\nuseEffect(()=>{  \r\n    const fetchAPI = async () =>{  \r\n        setFetchedCountires(await fetchCountries());  \r\n    }  \r\n    fetchAPI();  \r\n}, [setFetchedCountires])  \r\nconsole.log(fetchedCountires);  \r\n    return (  \r\n        <FormControl  className={styles.formControl}>      \r\n        <NativeSelect defaultValue=\"\" onChange ={(e) => handleCountryChange(e.target.value)}  variant=\"filled\">  \r\n            <option value=\"\">Global</option>  \r\n    {fetchedCountires.map((country,i) => <option key={i} value={country}>{country}</option>)}  \r\n        </NativeSelect>  \r\n        </FormControl >  \r\n    )  \r\n}  \r\nexport default CountryPicker;","\nimport React, { Component } from 'react'\nimport './App.css';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker'\nimport {fetchData} from './api';\nimport corona from './image.png';\nclass App extends Component {\n  state = {\n    data : {},\n    country:'',\n  }\n  async componentDidMount()\n  {\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData})\n  }\n  handleCountryChange = async(country) =>\n  {\n    const fetchedData = await fetchData(country);\n    this.setState({data:fetchedData,country:country});\n    //console.log(country);\n  }\n  render() {\n    const {data,country}=this.state;\n    return (\n      <div className=\"container\">\n        <img src={corona} className=\"image\" alt=\"COVID-19\"/><br/>\n        <Cards data={data}/><br></br><br></br>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/><br></br><br></br>\n        <Chart data={data} country={country}/>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2SweR\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}